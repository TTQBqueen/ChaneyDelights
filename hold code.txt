"use strict";
const express = require("express");
const app = express();
const path=require("path");

const multer = require("multer");
app.use(multer().none());
app.use(express.urlencoded({ extended: true }));
app.use(express.json());


app.set('view engine', 'ejs')
app.set('views', path.join(__dirname, 'views'));
app.use(express.static(path.join(__dirname, 'public')));


// Define route handler for /products/all
app.get('/products/all', (req, res) => {
  // Connect to your SQLite database
  const db = new sqlite3.Database('create_tables.sql.db', sqlite3.OPEN_READWRITE, (err) => {
    if (err) {
      console.error(err.message);
    }
    console.log('Connected to the database.');
  });

  // Retrieve all products from the database
  const sql = 'SELECT * FROM products';
  db.all(sql, [], (err, rows) => {
    if (err) {
      throw err;
    }
    // Render the products.ejs template and pass the products data
    res.render('products', { products: rows });
  });

  // Close the database connection
  db.close((err) => {
    if (err) {
      console.error(err.message);
    }
    console.log('Close the database connection.');
  });
});





CSS


// app.get("/", (req, res) => {
//   res.render("index", { title: 'Home Page' });
// });

app.get('/', (req, res) => {
  res.redirect("/index")
})

app.get('/homepage', (req, res) => {
  res.render("index" , { title: 'Home Page' });
})
app.get('/products', (req, res) => {
  res.render("products" , { title: 'Products' });
})
app.get('/details', (req, res) => {
  res.render("details" , { title: 'details' });
})
app.get('/cart', (req, res) => {
  res.render("cart" , { title: 'cart' });
})
app.get('/admin', (req, res) => {
  res.render("admin" , { title: 'admin' });
})
app.get('/admin/bulk', (req, res) => {
  res.render("bulk" , { title: 'bulk' });
})
app.get('/login', (req, res) => {
  res.render("login" , { title: 'login' });
})
app.get('/admin/edit', (req, res) => {
  res.render("edit" , { title: 'edit' });
})
//router
// const productsRouter = require("./routes/products.route");
// app.use("/product", productsRouter);



const PORT = process.env.PORT || 8000;
app.listen(PORT, () => {
  console.log("App listening at http://localhost:" + PORT);
});



.container{
    width: 900px;
    max-width:90vw;
    margin: auto;
    text-align: center;
    padding-top: 10px;
  
   }
   /* svg{
    width: 30px;
   } */
   header{
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 20px 0;
    margin-right: 5%;
   }
   header .icon-cart span{
    position: relative;
   }
   header .icon-cart span{
    display: flex;
    width: 30px;
    height: 30px;
    background-color: #86e6ee;
    justify-content: center;
    align-items: center;
    color: #86e6ee;
    border-radius: 50%;
    position: absolute;
    top: 90px;
   }
   .ListProducts .items img{
    width: 200px;
    height: 200px;
   }
   .ListProducts{
    display: grid;
    grid-template-columns:repeat(4, 1fr) ;
    gap: 20px;
   }
   .ListProducts .items{
    background-color:  rgb(165, 200, 165);
    padding: 20px;
    border-radius: 20px;
   }
   .ListProducts .items h2{
    font-weight: 500px;
    font-size: large;
  
   }
   .ListProducts .items .price{
    letter-spacing: 7px;
    font-size: small;
   }
   .ListProducts .items button{
    background-color: white;
    color: rgb(62, 39, 9);
    padding: 5px 10px;
    border-radius: 20px;
    margin-top: 10px;
    border: none;
    cursor: pointer;
  
   }
  
  body.showCart .cartTab{
    inset: 0 0 0 auto;
  }
  body.showCart .container{
    transform: translateX(-250px);
  
  }
   .cartTab h1{
    padding: 20px;
    margin: 0;
    font-weight: 300;
   }
   .cartTab .btn{
    display: grid;
    grid-template-columns: repeat(2, 1fr);
   }
   .cartTab .btn button{
    background-color: #eabfcb;
    border:none;
    font-weight: 500;
    cursor: pointer;
    font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif;
   }
   .cartTab .btn .close{
    background-color: white;   /*need to chnage color*/
   }
   .cartTab .listCart .item img{
    width:100%;
    margin-left: 10%;
   }
   .cartTab .listCart .item{
    display: grid;
    grid-template-columns: 70px 150px  50px 1fr;
    gap: 10px;
    text-align: center;
    align-items: center;
   }
  
   .listCart .quantity span{
    display: inline-block;
    width: 25px;
    height: 25px;
    background-color: white;
    color:black;
    border-radius: 50%;cursor: pointer;
   }
   .listCart .quantity span:nth-child(2){
    background-color: transparent;
    color:white;
   }
   .listCart .item:nth-child(even){
    background-color: rgba(255, 255, 255, 0.747); 
   }
   .listCart{
    overflow: auto;
   }
   .listCart .button{
    cursor: pointer;
    
   }
  
   #row1, #row2, #row3{
    display: flex;
    justify-content: space-around
   }
   
   svg:hover{
    color: #ecafc0;
   }
  
   #mealtitle{
    text-align: center;
    font-size: 40px;
   }
   /* The side navigation menu */
  .sidenav {
    height: 100%; /* 100% Full-height */
    width: 0; /* 0 width - change this with JavaScript */
    position: fixed; /* Stay in place */
    z-index: 1; /* Stay on top */
    top: 0; /* Stay at the top */
    left: 0;
    background-color: #ecafc0; /* Black*/
    overflow-x: hidden; /* Disable horizontal scroll */
    padding-top: 60px; /* Place content 60px from the top */
    transition: 0.5s; /* 0.5 second transition effect to slide in the sidenav */
  }
  
  /* The navigation menu links */
  .sidenav a {
    padding: 8px 8px 8px 32px;
    text-decoration: none;
    font-size: 25px;
    color: white;
    display: block;
    transition: 0.3s;
  }
  
  /* When you mouse over the navigation links, change their color */
  .sidenav a:hover {
    color: #f1f1f1;
  }
  
  /* Position and style the close button (top right corner) */
  .sidenav .closebtn {
    position: absolute;
    top: 0;
    right: 25px;
    font-size: 36px;
    margin-left: 50px;
  }
  .names{
    background-color:antiquewhite;
    color:black;
    text-align: center;
   height: 50px;
   margin: 5%;
   align-items: center;
    
  }
  .zoom{
    transition: transform .2s; /* Animation */
  }
  .zoom:hover{
    transform: scale(1.5);
  
  }
